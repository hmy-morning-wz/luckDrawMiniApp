var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

import MTR from './mtr';
import CONFIG from '../config';
import Utils from '../utils';

var Mtr = new MTR();
_extends(Mtr, Utils.common);
_extends(Mtr, CONFIG);
var Tracker = {
  Mtr: Mtr,
  App: {
    init: function init(a, app) {
      Mtr.st = Date.now();
      Mtr.request = Utils.alipay.request;
      Mtr.setStorageSync = Utils.alipay.setStorageSync;
      Mtr.setStorage = Utils.alipay.setStorage;
      Mtr.getStorageSync = Utils.alipay.getStorageSync;
      _extends(Mtr, a);

      Utils.alipay.getBasicInfo(function (BasicInfo) {
        _extends(Mtr, BasicInfo);
        Mtr.start();
        Mtr.mtrDebug && console.log('Mtr App init start');
      });
      try {
        my.canIUse('getRunScene') && my.getRunScene({
          success: function success(res) {
            res.envVersion !== 'release' && (Mtr.workspaceId = res.envVersion);
            Mtr.mtrDebug && console.log('Mtr getRunScene', res);
          }
        });
        if ('lauchOpts' in a && !('bizScenario' in a)) {
          var _a$lauchOpts = a.lauchOpts,
              query = _a$lauchOpts.query,
              scene = _a$lauchOpts.scene,
              referrerInfo = _a$lauchOpts.referrerInfo;

          Mtr.bizScenario = query && query.bizScenario || referrerInfo && referrerInfo.extraData && referrerInfo.extraData.bizScenario || referrerInfo && referrerInfo.appId || scene || '';
        }

        /* ((Tracker.Data.lanchInfo = a.lauchOpts), (Mtr.lanchInfo = a.lauchOpts)
                (Tracker.Data.lanchInfo.landing = 1))*/
      } catch (b) {
        Mtr.mtrDebug && console.error('Mtr', b);
      }

      Tracker.Data.userInfo = Mtr.userId;
      app.Tracker = Tracker;

      //onHide

      var onHide = app.onHide;
      app.onHide = function () {
        Mtr.mtrDebug && console.log('Mtr app onHide');
        Mtr.onAppHide();
        onHide && onHide.apply(this, arguments);
      };

      var onError = app.onError;
      app.onError = function (e) {
        Mtr.mtrDebug && console.log('Mtr app onError');
        Mtr.onAppError(e);
        onError && onError.apply(this, arguments);
      };

      Mtr.mtrDebug && console.log('Mtr App init');
    }
  },
  Page: {
    lifeFunction: ['onShow', 'onPageScroll', 'onLoad', 'onReachBottom', 'onHide', 'onPullDownRefresh', 'onUnload', 'setData'],
    init: function init(page) {
      var a = page || getCurrentPages()[getCurrentPages().length - 1];
      Mtr.mtrDebug && console.log('Mtr Page init ' + a.route);
      var b = a.onShow;
      a.onShow = function () {
        Mtr.mtrDebug && console.log('Mtr onShow ' + this.route);
        Mtr.pagePv();
        b && b.apply(this, arguments);
      };
      //onPageScroll
      var onPageScroll = a.onPageScroll;
      if (Mtr.stat_page_scroll) {
        a.onPageScroll = function () {
          Mtr.mtrDebug && console.log('Mtr onPageScroll ' + this.route);
          Mtr.click(this.route, 'PAGE_SCROLL');
          onPageScroll && onPageScroll.apply(this, arguments);
        };
      }

      //onReachBottom
      if (Mtr.stat_reach_bottom) {
        var onReachBottom = a.onReachBottom;
        a.onReachBottom = function () {
          Mtr.mtrDebug && console.log('Mtr onReachBottom ' + this.route);
          Mtr.click(this.route, 'REACH_BOTTOM');
          onReachBottom && onReachBottom.apply(this, arguments);
        };
      }
      //onHide
      if (Mtr.stat_hide) {
        var onHide = a.onHide;
        a.onHide = function () {
          Mtr.mtrDebug && console.log('Mtr onHide ' + this.route);
          Mtr.onPageHide();
          onHide && onHide.apply(this, arguments);
        };
      }
      //onPullDownRefresh
      if (Mtr.stat_pull_down_fresh) {
        var onPullDownRefresh = a.onPullDownRefresh;
        a.onPullDownRefresh = function () {
          Mtr.mtrDebug && console.log('Mtr onPullDownRefresh ' + this.route);
          Mtr.click(this.route, 'PULL_DOWN_REFRESH');
          onPullDownRefresh && onPullDownRefresh.apply(this, arguments);
        };
      }
      //onUnload
      if (Mtr.stat_unload) {
        var onUnload = a.onUnload;
        a.onUnload = function () {
          Mtr.mtrDebug && console.log('Mtr onUnload ' + this.route);
          Mtr.click(route, 'UNLOAD');
          onUnload && onUnload.apply(this, arguments);
        };
      }
      if (Mtr.stat_auto_click) {
        for (var e in a) {
          'function' === typeof a[e] && this.lifeFunction.indexOf(e) === -1 && e.indexOf('$') === -1 && (a[e] = Tracker.hook(e, a[e]));
        }
      }
      a.$mtr_click = function (seed, param) {
        Mtr.click(this.route, seed, param);
      };
      a.$mtr_expo = function (seed, dir, param) {
        Mtr.expo(this.route, seed, dir, param);
      };
      a.$mtr_calc = function (r, n, p4) {
        Mtr.calc(this.route, r, n, p4);
      };
    }
  },
  Component: {
    init: function init(a) {
      if (Mtr.stat_auto_click) {
        for (var e in a) {
          'function' === typeof a[e] && e.indexOf('$') === -1 && (a[e] = Tracker.hookComponent(e, a[e]));
        }
      }
    }
  },
  actionEventTypes: ['tap', 'longpress', 'appear', 'submit'],
  actionListener: function actionListener(t, e) {
    Mtr.mtrDebug && console.log('Mtr actionListener');
    if (t.trackered) {
      console.log('Mtr actionListener trackered');
      return;
    }
    t.trackered = true;
    var dataset = t.currentTarget.dataset;
    var xpath = (t.id || '') + '#' + e;
    var obj = dataset.obj;
    var name = obj ? obj.seedName || obj.icon_name || obj.text || obj.text_content || obj.mid_text_content || obj.name : undefined;
    var seedName = dataset.seed || dataset.seedName || dataset.title || name || xpath;
    if ("tap" === t.type || "longpress" === t.type || "submit" === t.type) {
      Mtr.mtrDebug && console.log('Tracker click', seedName);

      var _ref = obj || {},
          url_type = _ref.url_type,
          url_path = _ref.url_path,
          url_data = _ref.url_data,
          url_remark = _ref.url_remark;

      Mtr.click(this.route, seedName, {
        xpath: xpath,
        url_type: url_type,
        url_path: url_path,
        url_data: url_data,
        url_remark: url_remark,
        index: dataset.index || 0,
        group: dataset.group || '-'
      });
    } else if ("appear" === t.type) {
      Mtr.mtrDebug && console.log('Tracker expo', seedName);
      Mtr.expo(this.route, seedName, '-', {
        xpath: xpath,
        index: dataset.index || 0,
        group: dataset.group || '-'
      });
    }
    // ("tap" === t.type || "longpress" === t.type) &&  Mtr.click(t, e)
  },

  hookComponent: function hookComponent(t, e) {
    return function () {
      var s,
          i = arguments ? arguments[0] : void 0;
      if (i && i.currentTarget && -1 !== Tracker.actionEventTypes.indexOf(i.type)) try {
        Tracker.actionListener(i, t);
      } catch (t) {
        console.error(t);
      }
      return e.apply(this, arguments);
    };
  },
  hook: function hook(t, e) {
    return function () {
      var s,
          i = arguments ? arguments[0] : void 0;
      if (i && i.currentTarget && -1 !== Tracker.actionEventTypes.indexOf(i.type)) try {
        Tracker.actionListener(i, t);
      } catch (t) {
        console.error(t);
      }
      return e.apply(this, arguments);
    };
  },
  Data: { userInfo: null },
  log: function log(r) {
    Mtr.log(r);
  },
  err: function err(r, n) {
    Mtr.err(r, n);
  },
  click: function click(seed, param) {
    Mtr.click(null, seed, param);
  },
  calc: function calc(r, n, p4) {
    Mtr.calc(null, r, n, p4);
  },
  expo: function expo(seed, dir, param) {
    Mtr.expo(null, seed, dir, param);
  },
  setUserId: function setUserId(userId) {
    Mtr.setUserId(userId);
    this.Data.userInfo = userId;
  }
};

export default Tracker;