var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MTR = function () {
    function MTR() {
        _classCallCheck(this, MTR);

        this.cfg = {
            pageSeedId: 'MINI_MTRACKER_AP_PAGE',
            clkSeedId: 'MINI_MTRACKER_AP_CLK',
            calcSeedId: 'MINI_MTRACKER_AP_CALC',
            expoSeedId: 'MINI_MTRACKER_AP_EXPO',
            syslogSeedId: 'MINI_MTRACKER_AP_SYSLOG'
        };
        this.appVersion = null; // app version
        this.version = null; //mini app version
        this.mtrVer = null; // Tracker js versions
        this.mtrDebug = false;
        this.mPageState = null; // m.mPageState,
        this.platformType = '';
        this.bizScenario = null; //m.bizScenario,
        this.autoStart = true;
        this.autoError = true;
        this.autoClick = true;
        this.eventType = 'touchstart';
        this.autoExpo = false;
        this.bizType = 'MiniBehavior';
        this.expotTimeout = 300;
        this.servers = [];
        //this.expoType
        this.expoSection = [-0.3, 0.3];
        this.appId = '';
        this.url = null; //p.URL,
        this._ready = false;
        this.sendError = 0;
        this.sendSuccess = 0;
        this.sendCounter = 0;
        this.timezoneOffset = new Date().getTimezoneOffset();
        this.requestList = [];
        this.callList = [];
        this.requestTimestamp = 0;
        this.sendIng = 0;
        this.sn = 0;
        this.visitorList = [];
    }

    _createClass(MTR, [{
        key: '_start',
        value: function _start() {
            var that = this;
            that._ready = true;
            that.pageEvent("ON_LAUNCH", { lauchOpts: JSON.stringify(that.lauchOpts) });
            console.log('Mtr _start', that._ready, that.callList);
            while (that.callList && that.callList.length) {
                var send = that.callList.shift();
                send && that._remoteLog(send);
            }
        }
    }, {
        key: 'start',
        value: function start() {
            //this.ref = this._refFromStoragH5Trackere()
            // this._storeRef(this.url)
            var _this = this;
            if (typeof this.server === 'string') {
                this.servers.push(this.server);
            } else if (Array.isArray(this.server)) {
                this.servers = this.servers.concat(this.server);
            }
            //this.userId = this.userId || this.getStorageSync('mtr-userId')
            my.getStorage({
                key: 'mtr-sn',
                success: function success(res) {
                    _this.sn = res.data || res.APDataStorage || 0;
                    if (typeof _this.sn != 'number') {
                        _this.sn = 0;
                    }
                    console.log('Mtr mtr-sn', _this.sn);
                },
                complete: function complete() {}
            });

            if (!this.userId) {
                my.getStorage({
                    key: 'mtr-userId',
                    success: function success(res) {
                        _this.userId = res.data || res.APDataStorage;
                        console.log('Mtr mtr-userId', _this.userId);
                    },
                    complete: function complete() {
                        _this.autoStart && _this._start();
                    }
                });
            } else {
                _this.autoStart && _this._start();
            }
        }
    }, {
        key: '_send',
        value: function _send(msg) {
            var that = this;
            this.servers && this.servers.forEach(function (s) {
                that.request(s, msg, that);
            });
        }
    }, {
        key: '_trueUserId',
        value: function _trueUserId() {
            return this.userId || 'VISITOR';
        }
    }, {
        key: '_getSessionId',
        value: function _getSessionId() {
            return this.sessionId;
        }
    }, {
        key: '_getUUid',
        value: function _getUUid() {
            return this.UUid;
        }
    }, {
        key: '_formatRemoteParam',
        value: function _formatRemoteParam(msg) {
            var that = this;
            var param4 = {
                user_id: that._trueUserId(),
                fullURL: that.url,
                tzone: that.timezoneOffset,
                txSuc: that.sendSuccess,
                txCnt: that.sendCounter,
                txErr: that.sendError
            };
            that.bizType && (param4.bizType = that.bizType);
            that.appVersion && (param4.appVersion = that.appVersion);
            that.appName && (param4.appName = that.appName);
            that.bizScenario && (param4.mBizScenario = that.bizScenario);
            that.mPageState && (param4.mPageState = that.mPageState);
            that.mPlatformType && (param4.mPlatformType = that.mPlatformType);
            that.deviceModel && (param4.deviceModel = that.deviceModel);
            //that.lauchOpts && (param4.lauchOpts = JSON.stringify(that.lauchOpts))
            msg.param4 ? _extends(msg.param4, param4) : msg.param4 = param4;
            return msg;
        }
    }, {
        key: '_now',
        value: function _now() {
            var timezone = 8; //目标时区时间，东八区
            var offset_GMT = new Date().getTimezoneOffset(); // 本地时间和格林威治的时间差，单位为分钟
            var nowDate = new Date().getTime(); // 本地时间距 1970 年 1 月 1 日午夜（GMT 时间）之间的毫秒数
            var targetDate = new Date(nowDate + offset_GMT * 60 * 1000 + timezone * 60 * 60 * 1000);
            this.mtrDebug && console.log('Mtr 东8区现在是：' + targetDate);
            return targetDate;
        }
    }, {
        key: '_getSN',
        value: function _getSN() {
            return this.sn++;
        }
        /*
        *
        *
        # 字段名称
        字段 01	日志头 D-VM
        字段 02	客户端日志时间
        字段 03	客户端 ID
        字段 04	客户端版本
        字段 05	日志版本
        字段 06	终端 ID
        字段 07	会话 ID
        字段 08	用户 ID
        字段 09	行为 ID
        字段 10	行为状态
        字段 11	行为状态消息
        字段 12	子应用 ID
        字段 13	子应用版本
        字段 14	视图 ID
        字段 15	自动化埋点的 contentId
        字段 16	埋点 ID
        字段 17	url
        字段 18	行为类型
        字段 19	日志类型
        字段 20	扩展 1
        字段 21	扩展 2
        字段 22	扩展 3
        字段 23	扩展 4
        字段 24	sourceId营销来源
        字段 25	页面流水号
        字段 26	utdid
        字段 27	ucid 用例编号
        字段 28	索引号
        字段 29	上一个 VIEWID
        字段 30	当前 VIEWID
        字段 31	当前 ACTIONID
        字段 32	当前 ACTIONTOKEN
        字段 33	当前 ACTIONDESC
        字段 34	手机型号
        字段 35	操作系统版本
        字段 36	网络类型
        字段 37	内部版本号
        字段 38	渠道号
        字段 39	语言
        字段 40	hotPatch 版本号
        字段 41	Android: CPU CoreNum
        字段 42	Android: CPU MaxFreq，单位 MHz
        字段 43	Android: TotalMem，单位 MB
        字段 44	基础额外字段
        字段 45	UserSessionId
        字段 46	分辨率
        *
        * */

    }, {
        key: '_packFinalData',
        value: function _packFinalData(data) {
            data.param4 = _extends({
                mtrVer: this.mtrVer || '-',
                mtrSeed: data.param2 || '',
                mtrValue: data.param3 || ''
            }, data.param4);
            var that = this;
            var type = 'MINI';
            var sendList = ['D-VM', that.dateFormat(that._now()), (that.appId || '') + '_' + type.toUpperCase() + '-' + (that.workspaceId || 'default'), that.version || '-', '2', '-', that._getSessionId() || '-', that._trueUserId() || '-', data.seedId || '-', '-', '-', '-', '-', '-', '-', data.seedId || '-', that._encodeStr(that.url || '-'), that.bizType, 'c', that._encodeStr(data.param1 || '-'), data.param2 || '', data.param3 || '', that._formatExinfoParam(data.param4) || '-', that.bizScenario || '-', that._getSN() || '-', that._getUUid() || '-', '-', '-', that._encodeStr(that.ref || '-'), that._encodeStr(that.url || '-'), '-', '-', '-', that.os || '-', that.osVersion || '-', that.networkType || '-', '-', '-', that.language || '-', '-', '-', '-', '-', '-', '-', that.screen && that.screen.width + 'x' + that.screen.height || '-', '-', '-'];
            return this.mtrDebug && console.log('Mtr', sendList), sendList.join();
        }
    }, {
        key: '_remoteLog',
        value: function _remoteLog(msg) {
            if (this._ready) {
                this._formatRemoteParam(msg);
                var r = this._packFinalData(msg);
                this._send(r);
                if (this._trueUserId() === 'VISITOR') {
                    this.visitorList.push(r);
                }
                this.mtrDebug && console.log('Mtr _remoteLog _send');
            } else {
                this.callList.push(msg);
                this.mtrDebug && console.log('Mtr _remoteLog push');
            }
        }
    }, {
        key: 'setUserId',
        value: function setUserId(userId) {
            var resend = this._trueUserId() === 'VISITOR' && userId !== this.userId && this.visitorList.length;
            this.userId = userId;
            this.setStorage('mtr-userId', userId);
            if (resend) {
                var that = this;
                while (that.visitorList && that.visitorList.length) {
                    var send = that.visitorList.shift();
                    send = send && send.replace('VISITOR', that.userId).replace('VISITOR', that.userId);
                    send && that._send(send);
                }
                this.mtrDebug && console.log('Mtr VISITOR resended');
            }
        }
    }, {
        key: 'click',
        value: function click(url, seed, param) {
            this.mtrDebug && console.log('Mtr click', seed);
            //var info = this.getMainInfo()
            this.url = url || this.getMainInfo().url;
            var that = this;
            var msg = {
                seedId: that.cfg.clkSeedId,
                param1: that.url,
                param2: this._encodeStr(seed),
                param4: {}
            };
            var i = that.dealExtra(param);
            that.extend(msg.param4, i);
            that._remoteLog(msg);
        }
    }, {
        key: 'calc',
        value: function calc(url, r, n, p4) {
            this.mtrDebug && console.log('Mtr calc');
            //var info = this.getMainInfo()
            this.url = url || this.getMainInfo().url;
            var a = {
                seedId: this.cfg.calcSeedId,
                param1: this.url,
                param2: this._encodeStr(r),
                param3: n,
                param4: p4 || {}
            };
            this._remoteLog(a);
        }
    }, {
        key: 'logJump',
        value: function logJump(currentPage, to, p4) {
            if (this.jumpPage && this.jumpPage === currentPage) {
                return;
            }
            this.mtrDebug && console.log('Mtr logJump');
            //Mtr.st app init
            //this.ld page onShow
            //this.hd  page hide
            //this.jo  page jump
            //h5  this.ol || this.dr
            var jo = this.ld || this.st;
            var now = Date.now();
            var t0 = now - jo;
            this.jo = now;
            if (!this.hd) {
                to = to || '-';
                p4 = p4 || {};
                _extends(p4, {
                    currentPage: currentPage,
                    nextPage: to
                });
                this.calc('PAGE_STAY', t0, p4);
            }
            this.jumpPage = currentPage;
        }
    }, {
        key: 'onPageHide',
        value: function onPageHide() {
            var info = this.getMainInfo();
            var currentPage = info.url;
            this.pageHide(currentPage);
        }
    }, {
        key: 'onAppHide',
        value: function onAppHide() {
            this.pageEvent("APP_HIDE");
            this.setStorage('mtr-sn', this.sn);
        }
    }, {
        key: 'onAppError',
        value: function onAppError(err) {
            this.err('APP_ERROR', err);
        }
    }, {
        key: 'pageHide',
        value: function pageHide(currentPage, p4) {
            this.mtrDebug && console.log('Mtr pageHide');
            var jo = this.ld || this.st;
            var now = Date.now();
            var t0 = now - jo;
            this.hd = now;
            if (!this.jo) {
                p4 = p4 || {};
                _extends(p4, {
                    currentPage: currentPage
                });
                this.calc('PAGE_STAY', t0, p4);
            }
        }
    }, {
        key: 'pageEvent',
        value: function pageEvent(event, t) {
            this.mtrDebug && console.log('Mtr pageEvent', t);
            this._remoteLog({
                seedId: this.cfg.pageSeedId,
                param1: '',
                param2: event,
                param3: '',
                param4: t || {}
            });
        }
    }, {
        key: 'pagePv',
        value: function pagePv(t) {
            this.mtrDebug && console.log('Mtr pagePv');
            var info = this.getMainInfo();

            var currentPage = info.url;
            if (this.currentPage && this.currentPage !== currentPage) {
                this.logJump(this.currentPage, currentPage);
            }
            this.ref = this.url;
            this.ref = this.url;
            this.url = info.url;
            this.ld = Date.now();
            this.hd = 0;
            this.jo = 0;
            this.currentPage = currentPage;
            this._remoteLog({
                seedId: this.cfg.pageSeedId,
                param1: this.url,
                param2: 'PAGE_LOAD',
                param3: '',
                param4: t || {}
            });
        }
    }, {
        key: 'log',
        value: function log(r) {
            this.mtrDebug && console.log('Mtr log');
            var info = this.getMainInfo();
            this.url = info.url;
            this._remoteLog({
                seedId: this.cfg.syslogSeedId,
                param1: this.url,
                param2: encodeURIComponent(JSON.stringify(r))
            });
        }
    }, {
        key: 'err',
        value: function err(r, n) {
            this.mtrDebug && console.log('Mtr err');
            var info = this.getMainInfo();
            this.url = info.url;
            this._remoteLog({
                seedId: 'MTRERR_' + this.appId + '_' + r,
                type: 'error',
                param1: this.url,
                param2: encodeURIComponent(JSON.stringify(n))
            });
        }
    }, {
        key: 'expo',
        value: function expo(url, item, dir, data) {
            this.mtrDebug && console.log('Mtr expo');
            this.url = url || this.getMainInfo().url;
            var d = this.dealExtra(data);
            this._remoteLog({
                seedId: this.cfg.expoSeedId,
                param1: this.url,
                param2: this._encodeStr(item),
                param3: dir,
                param4: d || {}
            });
        }
    }, {
        key: 'dealExtra',
        value: function dealExtra(e) {
            var t = 'mtr-',
                r = {};
            for (var n in e) {
                if (e.hasOwnProperty(n)) {
                    var a = 0 === n.indexOf(t) ? n : t + n;
                    r[a] = e[n];
                }
            }return r;
        }
    }, {
        key: 'extend',
        value: function extend(e, t) {
            for (var r in t) {
                void 0 !== t[r] && (e[r] = t[r]);
            }
        }
    }]);

    return MTR;
}();

export default MTR;