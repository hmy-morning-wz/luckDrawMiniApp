function setStorageSync(key, data) {
  my.setStorageSync({ key: key, data: data });
}

function setStorage(key, data) {
  my.setStorage({ key: key, data: data });
}

function getStorageSync(key) {
  //return my.getStorageSync({ key: key }).data
  var o = my.getStorageSync({ key: key });
  console.log(key, o);
  return o.data || o.APDataStorage;
}
function guid() {
  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (e) {
    var t = 16 * Math.random() | 0,
        r = 'x' === e ? t : 3 & t | 8;
    return r.toString(16);
  });
}

function setUID(key, uid) {
  try {
    var key = key || 'mtr-mdap';
    setStorage(key, uid);
    return uid;
  } catch (b) {}
}

function getUUid(callback) {
  var uid;
  var key = 'mtr-mdap';
  try {
    my.getStorage({ key: key, success: function success(res) {
        uid = res && res.success && res.data;
        uid = uid ? uid : (uid = guid(), setUID(key, uid));
      },
      complete: function complete() {
        callback && callback(uid);
      }
    });
  } catch (a) {}
}

function getSessionId() {
  return guid();
  /*   var uid
  var key = 'mtr-mdap-ssid'
  try {
    uid = getStorageSync(key)
  } catch (a) {}
  return uid ? uid : ((uid = guid()), setUID(key, uid)) */
}

function getSystemInfo(callback) {
  var info = {};
  getUUid(function (res) {
    var UUid = res;
    my.getSystemInfo({ success: function success(a) {
        info = {
          deviceModel: encodeURIComponent(a.model),
          pixelRatio: a.pixelRatio,
          screen: { width: a.windowWidth, height: a.windowHeight },
          language: a.language,
          appVersion: a.version,
          osVersion: encodeURIComponent(a.system),
          os: encodeURIComponent(a.platform),
          UUid: UUid,
          sessionId: getSessionId()
        };
      },
      complete: function complete() {
        callback && callback(info);
      }
    });
  });
}

function getBasicInfo(callback) {
  getSystemInfo(function (info) {
    my.getNetworkType({
      success: function success(res) {
        try {
          info.networkType = res && res.networkType || my.setStorage({
            key: 'mtr-mdap-networkType',
            data: res && res.networkType
          });
        } catch (c) {}
      },
      complete: function complete() {
        callback && callback(info);
      }
    });
  });
}
function requestNext(that) {
  if (that && that.requestList && that.requestList.length > 0) {
    var send = that.requestList.shift();
    that.requestTimestamp = Date.now();
    that && that.mtrDebug && console.log('Mtr request ');
    that.sendIng = 1;
    my.canIUse('request') && my.request(send);
  }
}

function request(url, msg, that) {
  var send = {
    url: url,
    headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
    data: 'data=' + encodeURIComponent(msg),
    method: 'POST',
    dataType: 'text',
    success: function success(res) {
      that && that.sendSuccess++;
      that && that.mtrDebug && console.log('Mtr send Success');
    },
    fail: function fail(res) {
      that && that.sendError++;
      that && that.mtrDebug && console.log('Mtr send fail', res);
    },
    complete: function complete(res) {
      that.sendIng = 0;
      that && that.mtrDebug && console.log('Mtr send complete');
      requestNext(that);
    }
  };
  that && that.sendCounter++;
  if (that && that.requestList) {
    that.requestList.push(send);
    if (that.sendIng === 0 || Date.now() - that.requestTimestamp > 30000) {
      requestNext(that);
    }
  } else {
    my.canIUse('request') && my.request(send);
  }
}

export default {
  getBasicInfo: getBasicInfo,
  request: request,
  setStorageSync: setStorageSync,
  setStorage: setStorage,
  getStorageSync: getStorageSync
};